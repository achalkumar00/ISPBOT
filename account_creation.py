# -*- coding: utf-8 -*-
"""
Account Creation Module - India Social Panel
Separate module for all account creation and login functionality
"""

import os
from datetime import datetime
from typing import Dict, Any, Optional
from aiogram import F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
)

# Global variables (will be initialized from main.py)
dp: Any = None
users_data: Dict[int, Dict[str, Any]] = {}
user_state: Dict[int, Dict[str, Any]] = {}
safe_edit_message: Any = None
init_user: Any = None
mark_user_for_notification: Any = None
is_message_old: Any = None
bot: Any = None
START_TIME: float = 0

def get_account_creation_menu() -> InlineKeyboardMarkup:
    """Build account creation menu"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ Create Account", callback_data="create_account")]
    ])

# Duplicate functions removed - already defined above

def get_account_complete_menu() -> InlineKeyboardMarkup:
    """Build menu after account creation"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üë§ My Account", callback_data="my_account"),
            InlineKeyboardButton(text="üè† Main Menu", callback_data="back_main")
        ]
    ])

def get_initial_options_menu() -> InlineKeyboardMarkup:
    """Build initial options menu with create account and login"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìù Create New Account", callback_data="create_account"),
            InlineKeyboardButton(text="üîê Login to Account", callback_data="login_account")
        ],
        [
            InlineKeyboardButton(text="‚ùì Help & Support", callback_data="help_support")
        ]
    ])

def init_account_creation_handlers(main_dp, main_users_data, main_user_state, main_safe_edit_message, 
                                 main_init_user, main_mark_user_for_notification, main_is_message_old, 
                                 main_bot, main_start_time):
    """Initialize account creation handlers with references from main.py"""
    global dp, users_data, user_state, safe_edit_message, init_user, mark_user_for_notification, is_message_old, bot, START_TIME

    dp = main_dp
    users_data = main_users_data
    user_state = main_user_state
    safe_edit_message = main_safe_edit_message
    init_user = main_init_user
    mark_user_for_notification = main_mark_user_for_notification
    is_message_old = main_is_message_old
    bot = main_bot
    START_TIME = main_start_time

    # Register all account creation handlers
    register_account_creation_handlers()

def register_account_creation_handlers():
    """Register all account creation callback handlers"""
    if dp:
        dp.callback_query.register(cb_login_account, F.data == "login_account")
        dp.callback_query.register(cb_create_account, F.data == "create_account")
        dp.callback_query.register(cb_use_telegram_name, F.data == "use_telegram_name")
        dp.callback_query.register(cb_use_custom_name, F.data == "use_custom_name")
        dp.callback_query.register(cb_manual_phone_entry, F.data == "manual_phone_entry")
        dp.callback_query.register(cb_share_telegram_contact, F.data == "share_telegram_contact")

        # Register message handlers for account creation
        dp.message.register(handle_contact_sharing, F.contact)
        dp.message.register(handle_text_input, F.text)

# ========== ACTUAL ACCOUNT CREATION HANDLERS ==========
async def cb_login_account(callback: CallbackQuery):
    """Handle existing user login"""
    if not callback.message or not callback.from_user:
        return

    # Check if callback is old (sent before bot restart)
    if callback.message.date and callback.message.date.timestamp() < START_TIME:
        mark_user_for_notification(callback.from_user.id)
        return  # Ignore old callbacks

    user_id = callback.from_user.id

    # Initialize user state if not exists
    if user_id not in user_state:
        user_state[user_id] = {"current_step": None, "data": {}}

    user_state[user_id]["current_step"] = "waiting_login_phone"

    text = """
üîê <b>Login to Your Account</b>

üì± <b>Account Verification</b>

–Å–Ø–¢–± <b>—Ä–¥–•—Ä–µ–ì—Ä–¥–∫—Ä–¥–ø—Ä–¥‚ïõ —Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–¥‚ïõ registered phone number —Ä–¥–Ω—Ä–µ–ó—Ä–¥–¨—Ä–µ–ó—Ä–¥–í:</b>

‚ö†Ô∏è <b>Example:</b> +91 9876543210
–Å–Ø–§–¢ <b>Security:</b> Phone number verification —Ä–¥–•—Ä–µ–ó —Ä–¥‚ñì—Ä–¥‚îê—Ä–¥–ü

–Å–Ø–¢–± <b>—Ä–¥–ï—Ä–¥–ß—Ä–¥‚ñë phone number —Ä–¥–Ω—Ä–µ–í—Ä–¥‚ñì —Ä–¥–ß—Ä–¥–ü —Ä–¥‚ï£—Ä–µ–ò—Ä–¥–í —Ä–¥–¥—Ä–µ–õ support —Ä–¥‚ïï—Ä–µ–ó contact —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í</b>
–Å–Ø–£–Æ <b>Support:</b> @achal_parvat
"""

    await safe_edit_message(callback, text)
    await callback.answer()

async def cb_create_account(callback: CallbackQuery):
    """Start account creation process"""
    if not callback.message or not callback.from_user:
        return

    # Check if callback is old (sent before bot restart)
    if callback.message.date and callback.message.date.timestamp() < START_TIME:
        mark_user_for_notification(callback.from_user.id)
        return  # Ignore old callbacks

    user_id = callback.from_user.id
    telegram_name = callback.from_user.first_name or "User"

    # Initialize user state if not exists
    if user_id not in user_state:
        user_state[user_id] = {"current_step": None, "data": {}}

    user_state[user_id]["current_step"] = "choosing_name_option"

    text = f"""
–Å–Ø–£–õ <b>Account Creation - Step 1/3</b>

–Å–Ø–°–¥ <b>Name Selection</b>

–Å–Ø–¢–± <b>—Ä–¥–ñ—Ä–¥–∫ —Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–µ–ó account —Ä–¥–•—Ä–µ–ó —Ä–¥‚ñì—Ä–¥‚îê—Ä–¥–ü —Ä–¥–•—Ä–µ–ú—Ä–¥–∏ —Ä–¥‚ïï—Ä–¥‚ïõ name use —Ä–¥–•—Ä–¥‚ñë—Ä–¥–∏—Ä–¥‚ïõ —Ä–¥–™—Ä–¥‚ïõ—Ä–¥‚ï£—Ä–¥–¥—Ä–µ–ó —Ä–¥‚ï£—Ä–µ–ò—Ä–¥–í?</b>

–Å–Ø–§‚ïï <b>Your Telegram Name:</b> {telegram_name}
–Å–Ø–§‚ïï <b>Custom Name:</b> —Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–µ–ê —Ä–¥–∫—Ä–¥‚ïï—Ä–¥–í—Ä–¥–∂ —Ä–¥–•—Ä–¥‚ïõ name

—Ç–™–∞—è‚ïï–ü <b>Note:</b> Custom name —Ä–¥–æ—Ä–µ–ó—Ä–¥–í maximum 6 characters allowed —Ä–¥‚ï£—Ä–µ–ò—Ä–¥–í (first name only)

–Å–Ø–¢–º <b>—Ä–¥–ñ—Ä–¥–∫ —Ä–¥–•—Ä–µ–ù—Ä–¥–ø—Ä–¥‚ïõ choose —Ä–¥–•—Ä–¥‚ñë—Ä–¥–∏—Ä–¥‚ïõ —Ä–¥–™—Ä–¥‚ïõ—Ä–¥‚ï£—Ä–¥–¥—Ä–µ–ó —Ä–¥‚ï£—Ä–µ–ò—Ä–¥–í?</b>
"""

    name_choice_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="—Ç–¨–ï Telegram Name Use —Ä–¥–•—Ä–¥‚ñë—Ä–µ–í—Ä–¥–í", callback_data="use_telegram_name"),
            InlineKeyboardButton(text="—Ç–¨–ü—è‚ïï–ü Custom Name —Ä–¥–±—Ä–¥‚ïõ—Ä–¥‚ñì—Ä–µ–í—Ä–¥–í", callback_data="use_custom_name")
        ]
    ])

    await safe_edit_message(callback, text, name_choice_keyboard)
    await callback.answer()

async def cb_use_telegram_name(callback: CallbackQuery):
    """Use Telegram name for account creation"""
    if not callback.message or not callback.from_user:
        return

    user_id = callback.from_user.id
    telegram_name = callback.from_user.first_name or "User"

    # Store telegram name and move to next step
    if user_id not in user_state:
        user_state[user_id] = {"current_step": None, "data": {}}

    user_state[user_id]["data"]["full_name"] = telegram_name
    user_state[user_id]["current_step"] = "choosing_phone_option"

    text = f"""
—Ç–¨–ï <b>Name Successfully Selected!</b>

–Å–Ø–°–¥ <b>Selected Name:</b> {telegram_name}

–Å–Ø–£–õ <b>Account Creation - Step 2/3</b>

–Å–Ø–£‚ñí <b>Phone Number Selection</b>

–Å–Ø–¢–± <b>—Ä–¥–ñ—Ä–¥–∫ phone number —Ä–¥–•—Ä–µ–ò—Ä–¥‚ïï—Ä–µ–ó provide —Ä–¥–•—Ä–¥‚ñë—Ä–¥–∏—Ä–¥‚ïõ —Ä–¥–™—Ä–¥‚ïõ—Ä–¥‚ï£—Ä–¥–¥—Ä–µ–ó —Ä–¥‚ï£—Ä–µ–ò—Ä–¥–í?</b>

–Å–Ø–§‚ïï <b>Telegram Contact:</b> —Ä–¥–ñ—Ä–¥–∫—Ä–¥–•—Ä–¥‚ïõ Telegram —Ä–¥–æ—Ä–µ–ó—Ä–¥–í saved contact number
–Å–Ø–§‚ïï <b>Manual Entry:</b> —Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–µ–ê —Ä–¥–∫—Ä–¥‚ïï—Ä–¥–í—Ä–¥–∂ —Ä–¥–•—Ä–¥‚ïõ —Ä–¥–•—Ä–µ–õ—Ä–¥–ò —Ä–¥–Ω—Ä–µ–ê number

—Ç–™–∞—è‚ïï–ü <b>Note:</b> Contact share —Ä–¥–•—Ä–¥‚ñë—Ä–¥–∏—Ä–µ–ó —Ä–¥‚ïï—Ä–µ–ó —Ä–¥–ñ—Ä–¥–∫—Ä–¥–•—Ä–µ–ê permission —Ä–¥–æ—Ä–¥‚ïõ—Ä–¥–ë—Ä–¥–ß—Ä–µ–ê —Ä–¥–¨—Ä–¥‚ïõ—Ä–¥–ü—Ä–¥–ß—Ä–µ–ê —Ä–¥–§—Ä–¥‚ñë —Ä–¥–ñ—Ä–¥–∫—Ä–¥–•—Ä–¥‚ïõ number automatically —Ä–¥–Ω—Ä–¥‚ñë —Ä–¥–¨—Ä–¥‚ïõ—Ä–¥–ü—Ä–¥–ß—Ä–¥‚ïõ

–Å–Ø–¢–º <b>—Ä–¥–ñ—Ä–¥–∫ —Ä–¥–•—Ä–µ–ù—Ä–¥–ø—Ä–¥‚ïõ choose —Ä–¥–•—Ä–¥‚ñë—Ä–¥–∏—Ä–¥‚ïõ —Ä–¥–™—Ä–¥‚ïõ—Ä–¥‚ï£—Ä–¥–¥—Ä–µ–ó —Ä–¥‚ï£—Ä–µ–ò—Ä–¥–í?</b>
"""

    phone_choice_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–Å–Ø–£‚ñí Telegram Contact Share —Ä–¥–•—Ä–¥‚ñë—Ä–µ–í—Ä–¥–í", callback_data="share_telegram_contact"),
            InlineKeyboardButton(text="—Ç–¨–ü—è‚ïï–ü Manual Number —Ä–¥–±—Ä–¥‚ïõ—Ä–¥‚ñì—Ä–µ–í—Ä–¥–í", callback_data="manual_phone_entry")
        ]
    ])

    await safe_edit_message(callback, text, phone_choice_keyboard)
    await callback.answer()

async def cb_use_custom_name(callback: CallbackQuery):
    """Use custom name for account creation"""
    if not callback.message or not callback.from_user:
        return

    user_id = callback.from_user.id

    # Initialize user state if not exists
    if user_id not in user_state:
        user_state[user_id] = {"current_step": None, "data": {}}

    user_state[user_id]["current_step"] = "waiting_custom_name"

    text = """
—Ç–¨–ü—è‚ïï–ü <b>Custom Name Entry</b>

–Å–Ø–£–õ <b>Account Creation - Step 1/3</b>

–Å–Ø–£–≠ <b>—Ä–¥–•—Ä–µ–ì—Ä–¥–∫—Ä–¥–ø—Ä–¥‚ïõ —Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–¥‚ïõ —Ä–¥–∏—Ä–¥‚ïõ—Ä–¥–æ —Ä–¥–Ω—Ä–µ–ó—Ä–¥–¨—Ä–µ–ó—Ä–¥–í:</b>

—Ç–™–∞—è‚ïï–ü <b>Rules:</b>
—Ç–ê–≤ Maximum 6 characters allowed
—Ç–ê–≤ First name only
—Ç–ê–≤ No special characters
—Ç–ê–≤ English —Ä–¥–ø—Ä–¥‚ïõ Hindi —Ä–¥–æ—Ä–µ–ó—Ä–¥–í type —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í

–Å–Ø–¢–º <b>Example:</b> Rahul, Priya, Arjun

–Å–Ø–§–© <b>—Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–¥‚ïõ name type —Ä–¥–•—Ä–¥‚ñë—Ä–¥–•—Ä–µ–ó —Ä–¥–Ω—Ä–µ–ó—Ä–¥–¨ —Ä–¥–∂—Ä–µ–ó—Ä–¥–í:</b>
"""

    await safe_edit_message(callback, text)
    await callback.answer()

async def cb_manual_phone_entry(callback: CallbackQuery):
    """Handle manual phone number entry"""
    if not callback.message or not callback.from_user:
        return

    user_id = callback.from_user.id

    # Initialize user state if not exists
    if user_id not in user_state:
        user_state[user_id] = {"current_step": None, "data": {}}

    user_state[user_id]["current_step"] = "waiting_manual_phone"

    text = """
—Ç–¨–ü—è‚ïï–ü <b>Manual Phone Entry</b>

–Å–Ø–£–õ <b>Account Creation - Step 2/3</b>

–Å–Ø–£‚ñí <b>—Ä–¥–•—Ä–µ–ì—Ä–¥–∫—Ä–¥–ø—Ä–¥‚ïõ —Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–¥‚ïõ Phone Number —Ä–¥–Ω—Ä–µ–ó—Ä–¥–¨—Ä–µ–ó—Ä–¥–í:</b>

—Ç–™–∞—è‚ïï–ü <b>Format Rules:</b>
—Ç–ê–≤ Must start with +91 (India)
—Ç–ê–≤ Total 13 characters
—Ç–ê–≤ Only numbers after +91
—Ç–ê–≤ No spaces or special characters

–Å–Ø–¢–º <b>Examples:</b>
—Ç–ê–≤ +919876543210 —Ç–¨–ï
—Ç–ê–≤ +91 9876543210 —Ç–≠–ú (space not allowed)
—Ç–ê–≤ 9876543210 —Ç–≠–ú (country code missing)

–Å–Ø–§–© <b>—Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–¥‚ïõ complete phone number type —Ä–¥–•—Ä–¥‚ñë—Ä–¥–•—Ä–µ–ó —Ä–¥–Ω—Ä–µ–ó—Ä–¥–¨ —Ä–¥–∂—Ä–µ–ó—Ä–¥–í:</b>
"""

    await safe_edit_message(callback, text)
    await callback.answer()

async def cb_share_telegram_contact(callback: CallbackQuery):
    """Request Telegram contact sharing for phone number"""
    if not callback.message or not callback.from_user:
        return

    user_id = callback.from_user.id

    # Initialize user state if not exists
    if user_id not in user_state:
        user_state[user_id] = {"current_step": None, "data": {}}

    user_state[user_id]["current_step"] = "waiting_contact_permission"

    text = """
–Å–Ø–£‚ñí <b>Telegram Contact Permission</b>

–Å–Ø–§–† <b>Contact Sharing Request</b>

–Å–Ø–¢–± <b>—Ä–¥‚ï£—Ä–¥–æ—Ä–µ–ó—Ä–¥–í —Ä–¥–ñ—Ä–¥–∫—Ä–¥–•—Ä–µ–ó contact —Ä–¥–•—Ä–µ–õ access —Ä–¥–•—Ä–¥‚ñë—Ä–¥–∏—Ä–µ–ó —Ä–¥–•—Ä–µ–ê permission —Ä–¥–™—Ä–¥‚ïõ—Ä–¥‚ï£—Ä–¥‚îê—Ä–¥–ü</b>

—Ç–¨–ï <b>Benefits:</b>
—Ç–ê–≤ Automatic phone number fill
—Ç–ê–≤ Faster account creation
—Ç–ê–≤ No typing errors
—Ç–ê–≤ Secure & verified number

–Å–Ø–§–¢ <b>Security:</b>
—Ç–ê–≤ —Ä–¥–ñ—Ä–¥–∫—Ä–¥–•—Ä–¥‚ïõ phone number safely store —Ä–¥‚ï£—Ä–µ–õ—Ä–¥–ß—Ä–¥‚ïõ
—Ç–ê–≤ —Ä–¥–•—Ä–µ–ó—Ä–¥‚ï°—Ä–¥‚ñì account creation —Ä–¥–•—Ä–µ–ó —Ä–¥‚ñì—Ä–¥‚îê—Ä–¥–ü use —Ä–¥‚ï£—Ä–µ–õ—Ä–¥–ß—Ä–¥‚ïõ
—Ç–ê–≤ Third party —Ä–¥–•—Ä–µ–ó —Ä–¥‚ïï—Ä–¥‚ïõ—Ä–¥–µ share —Ä–¥–∏—Ä–¥‚ï£—Ä–µ–ê—Ä–¥–í —Ä–¥‚ï£—Ä–µ–õ—Ä–¥–ß—Ä–¥‚ïõ
—Ç–ê–≤ Complete privacy protection

—Ç–™–∞—è‚ïï–ü <b>Permission Steps:</b>
1. —Ä–¥–∏—Ä–µ–ê—Ä–¥–™—Ä–µ–ó "Send Contact" button —Ä–¥–∫—Ä–¥‚ñë click —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í
2. Telegram permission dialog —Ä–¥–ñ—Ä–¥–ü—Ä–¥–ß—Ä–µ–ê  
3. "Allow" —Ä–¥–ø—Ä–¥‚ïõ "Share Contact" —Ä–¥–∫—Ä–¥‚ñë click —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í
4. —Ä–¥–ñ—Ä–¥–∫—Ä–¥–•—Ä–¥‚ïõ number automatically —Ä–¥–Ω—Ä–¥‚ñë —Ä–¥–¨—Ä–¥‚ïõ—Ä–¥–ü—Ä–¥–ß—Ä–¥‚ïõ

–Å–Ø–¢–º <b>Ready to share your contact?</b>
"""

    from aiogram.types import KeyboardButton, ReplyKeyboardMarkup

    # Create contact request keyboard
    contact_keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–Å–Ø–£‚ñí Send My Contact", request_contact=True)],
            [KeyboardButton(text="—Ç–≠–ú Cancel & Enter Manually")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await safe_edit_message(callback, text)

    # Send new message with contact request keyboard
    await callback.message.answer(
        "–Å–Ø–£‚ñí <b>Neeche wale button se contact share —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í:</b>",
        reply_markup=contact_keyboard
    )

    await callback.answer()

# ========== CONTACT HANDLERS ==========
async def handle_contact_sharing(message):
    """Handle shared contact for phone number"""
    if not message.from_user or not message.contact:
        return

    # Check if message is old (sent before bot restart)
    if is_message_old(message):
        mark_user_for_notification(message.from_user.id)
        return  # Ignore old messages

    user_id = message.from_user.id
    contact = message.contact
    current_step = user_state.get(user_id, {}).get("current_step")

    if current_step == "waiting_contact_permission":
        # User shared their contact
        if contact.user_id == user_id:
            # Contact belongs to the same user
            phone_number = contact.phone_number

            # Ensure phone starts with + for international format
            if not phone_number.startswith('+'):
                phone_number = f"+{phone_number}"

            # Store phone number and move to next step
            user_state[user_id]["data"]["phone_number"] = phone_number
            user_state[user_id]["current_step"] = "waiting_email"

            # Remove contact keyboard
            from aiogram.types import ReplyKeyboardRemove

            success_text = f"""
—Ç–¨–ï <b>Contact Successfully Shared!</b>

–Å–Ø–£‚ñí <b>Phone Number Received:</b> {phone_number}

–Å–Ø–û–ô <b>Contact sharing successful!</b>

–Å–Ø–£–õ <b>Account Creation - Step 3/3</b>

–Å–Ø–£–∑ <b>—Ä–¥–•—Ä–µ–ì—Ä–¥–∫—Ä–¥–ø—Ä–¥‚ïõ —Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–¥‚ïõ Email Address —Ä–¥–Ω—Ä–µ–ó—Ä–¥–¨—Ä–µ–ó—Ä–¥–í:</b>

—Ç–™–∞—è‚ïï–ü <b>Example:</b> your.email@gmail.com
–Å–Ø–¢–º <b>Instruction:</b> —Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–¥‚ïõ email address type —Ä–¥–•—Ä–¥‚ñë—Ä–¥–•—Ä–µ–ó —Ä–¥–Ω—Ä–µ–ó—Ä–¥–¨ —Ä–¥–∂—Ä–µ–ó—Ä–¥–í
"""

            await message.answer(success_text, reply_markup=ReplyKeyboardRemove())

        else:
            # User shared someone else's contact
            from aiogram.types import ReplyKeyboardRemove

            text = """
—Ç–™–∞—è‚ïï–ü <b>Wrong Contact Shared</b>

–Å–Ø–™–ª <b>—Ä–¥–ñ—Ä–¥–∫—Ä–¥–∏—Ä–µ–ó —Ä–¥–•—Ä–¥‚îê—Ä–¥‚ïï—Ä–µ–ê —Ä–¥–§—Ä–¥‚ñë —Ä–¥–•—Ä–¥‚ïõ contact share —Ä–¥–•—Ä–¥‚îê—Ä–¥–ø—Ä–¥‚ïõ —Ä–¥‚ï£—Ä–µ–ò</b>

–Å–Ø–¢–± <b>Solutions:</b>
—Ç–ê–≤ —Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–¥‚ïõ own contact share —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í
—Ç–ê–≤ "Manual Entry" option choose —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í
—Ç–ê–≤ Account creation restart —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í

–Å–Ø–§–¢ <b>Security:</b> —Ä–¥–•—Ä–µ–ó—Ä–¥‚ï°—Ä–¥‚ñì —Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–¥‚ïõ own contact share —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í
"""

            manual_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="–Å–Ø–§–î Try Again", callback_data="share_telegram_contact"),
                    InlineKeyboardButton(text="—Ç–¨–ü—è‚ïï–ü Manual Entry", callback_data="manual_phone_entry")
                ]
            ])

            await message.answer(text, reply_markup=ReplyKeyboardRemove())
            await message.answer("–Å–Ø–¢–± <b>Choose an option:</b>", reply_markup=manual_keyboard)

    else:
        # Contact shared without proper context
        text = """
–Å–Ø–£‚ñí <b>Contact Received</b>

–Å–Ø–¢–± <b>Contact sharing —Ä–¥–•—Ä–µ–ó—Ä–¥‚ï°—Ä–¥‚ñì account creation —Ä–¥–•—Ä–µ–ó —Ä–¥–∂—Ä–µ–ú—Ä–¥‚ñë—Ä–¥‚ïõ—Ä–¥–∏ allowed —Ä–¥‚ï£—Ä–µ–ò</b>

–Å–Ø–§–î <b>—Ä–¥–ï—Ä–¥–ß—Ä–¥‚ñë —Ä–¥–ñ—Ä–¥–∫ account create —Ä–¥–•—Ä–¥‚ñë —Ä–¥‚ñë—Ä–¥‚ï£—Ä–µ–ó —Ä–¥‚ï£—Ä–µ–ò—Ä–¥–í —Ä–¥–¥—Ä–µ–õ /start —Ä–¥–•—Ä–¥‚ñë—Ä–¥–•—Ä–µ–ó restart —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í</b>
"""

        from aiogram.types import ReplyKeyboardRemove
        await message.answer(text, reply_markup=ReplyKeyboardRemove())

# ========== INPUT HANDLERS ==========
async def handle_text_input(message):
    """Handle text input for account creation"""
    if not message.from_user or not message.text:
        return

    # Check if message is old (sent before bot restart)
    if is_message_old(message):
        mark_user_for_notification(message.from_user.id)
        return  # Ignore old messages

    user_id = message.from_user.id

    # Check if user is in account creation flow
    current_step = user_state.get(user_id, {}).get("current_step")

    # Only handle account creation related steps, ignore others
    account_creation_steps = ["waiting_login_phone", "waiting_custom_name", "waiting_manual_phone", "waiting_email"]

    if current_step not in account_creation_steps:
        return  # Let other handlers deal with non-account creation text

    if current_step == "waiting_login_phone":
        await handle_login_phone_verification(message, user_id)
    elif current_step == "waiting_custom_name":
        await handle_custom_name_input(message, user_id)
    elif current_step == "waiting_manual_phone":
        await handle_manual_phone_input(message, user_id)
    elif current_step == "waiting_email":
        await handle_email_input(message, user_id)

# Helper functions for text input handling
async def handle_login_phone_verification(message, user_id):
    """Handle login phone verification"""
    phone = message.text.strip()

    # Find user with matching phone number
    matching_user = None
    for uid, data in users_data.items():
        if data.get('phone_number') == phone:
            matching_user = uid
            break

    if matching_user and matching_user == user_id:
        # Phone matches, complete login
        users_data[user_id]['account_created'] = True
        user_state[user_id]["current_step"] = None
        user_state[user_id]["data"] = {}

        # Get user display name for login success
        user_display_name = f"@{message.from_user.username}" if message.from_user.username else message.from_user.first_name or 'Friend'

        success_text = f"""
—Ç–¨–ï <b>Login Successful!</b>

–Å–Ø–û–ô <b>Welcome back {user_display_name} to India Social Panel!</b>

–Å–Ø–°–¥ <b>Account Details:</b>
—Ç–ê–≤ Name: {users_data[user_id].get('full_name', 'N/A')}
—Ç–ê–≤ Phone: {phone}
—Ç–ê–≤ Balance: —Ç–í‚ï£{users_data[user_id].get('balance', 0.0):.2f}

–Å–Ø–™–ê <b>All features are now accessible!</b>
–Å–Ø–¢–± <b>—Ä–¥–ñ—Ä–¥–∫ —Ä–¥–ï—Ä–¥–º —Ä–¥‚ïï—Ä–¥–Ω—Ä–µ–ê services —Ä–¥–•—Ä–¥‚ïõ —Ä–¥–ó—Ä–¥‚ïï—Ä–µ–ù—Ä–¥–¥—Ä–µ–ó—Ä–¥–æ—Ä–¥‚ïõ—Ä–¥‚ñì —Ä–¥–•—Ä–¥‚ñë —Ä–¥‚ïï—Ä–¥–•—Ä–¥–¥—Ä–µ–ó —Ä–¥‚ï£—Ä–µ–ò—Ä–¥–í</b>
"""

        # Import get_main_menu dynamically to avoid circular imports
        try:
            from main import get_main_menu
            await message.answer(success_text, reply_markup=get_main_menu())
        except ImportError:
            await message.answer(success_text)

    elif matching_user and matching_user != user_id:
        # Phone belongs to different user
        text = """
—Ç–™–∞—è‚ïï–ü <b>Account Mismatch</b>

–Å–Ø–£‚ñí <b>—Ä–¥–ø—Ä–¥‚ï£ phone number —Ä–¥–•—Ä–¥‚îê—Ä–¥‚ïï—Ä–µ–ê —Ä–¥–§—Ä–¥‚ñë account —Ä–¥‚ïï—Ä–µ–ó linked —Ä–¥‚ï£—Ä–µ–ò</b>

–Å–Ø–¢–± <b>Solutions:</b>
—Ç–ê–≤ —Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–¥‚ïõ correct phone number try —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í
—Ç–ê–≤ —Ä–¥–∏—Ä–¥–ø—Ä–¥‚ïõ account create —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í
—Ç–ê–≤ Support —Ä–¥‚ïï—Ä–µ–ó contact —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í

–Å–Ø–£–Æ <b>Support:</b> @achal_parvat
"""

        user_state[user_id]["current_step"] = None

        retry_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–Å–Ø–§–† Try Again", callback_data="login_account"),
                InlineKeyboardButton(text="–Å–Ø–£–≠ Create New Account", callback_data="create_account")
            ],
            [
                InlineKeyboardButton(text="–Å–Ø–£–Æ Contact Support", url=f"https://t.me/achal_parvat")
            ]
        ])

        await message.answer(text, reply_markup=retry_keyboard)

    else:
        # Phone not found in system
        text = """
—Ç–≠–ú <b>Account Not Found</b>

–Å–Ø–£‚ñí <b>—Ä–¥–ó—Ä–¥‚ïï phone number —Ä–¥‚ïï—Ä–µ–ó —Ä–¥–•—Ä–µ–õ—Ä–¥–ò account registered —Ä–¥–∏—Ä–¥‚ï£—Ä–µ–ê—Ä–¥–í —Ä–¥‚ï£—Ä–µ–ò</b>

–Å–Ø–¢–± <b>Options:</b>
—Ç–ê–≤ Phone number double-check —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í
—Ç–ê–≤ —Ä–¥–∏—Ä–¥–ø—Ä–¥‚ïõ account create —Ä–¥–•—Ä–¥‚ñë—Ä–µ–ó—Ä–¥–í
—Ç–ê–≤ Support —Ä–¥‚ïï—Ä–µ–ó help —Ä–¥‚ñì—Ä–µ–ó—Ä–¥–í

–Å–Ø–¥–§ <b>—Ä–¥–∫—Ä–¥‚ï£—Ä–¥‚ñì—Ä–µ–ó —Ä–¥‚ïï—Ä–µ–ó account —Ä–¥–∏—Ä–¥‚ï£—Ä–µ–ê—Ä–¥–í —Ä–¥‚ï£—Ä–µ–ò?</b>
"""

        user_state[user_id]["current_step"] = None

        options_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–Å–Ø–§–† Try Different Number", callback_data="login_account"),
                InlineKeyboardButton(text="–Å–Ø–£–≠ Create New Account", callback_data="create_account")
            ],
            [
                InlineKeyboardButton(text="–Å–Ø–£–Æ Contact Support", url=f"https://t.me/achal_parvat")
            ]
        ])

        await message.answer(text, reply_markup=options_keyboard)

async def handle_custom_name_input(message, user_id):
    """Handle custom name input with validation"""
    custom_name = message.text.strip()

    # Validate name length (max 6 characters)
    if len(custom_name) > 6:
        await message.answer(
            "—Ç–™–∞—è‚ïï–ü <b>Name too long!</b>\n\n"
            "–Å–Ø–£–ü <b>Maximum 6 characters allowed</b>\n"
            "–Å–Ø–¢–± <b>Please enter a shorter name</b>\n\n"
            "–Å–Ø–§–î <b>Try again with max 6 characters</b>"
        )
        return

    if len(custom_name) < 2:
        await message.answer(
            "—Ç–™–∞—è‚ïï–ü <b>Name too short!</b>\n\n"
            "–Å–Ø–£–ü <b>Minimum 2 characters required</b>\n"
            "–Å–Ø–¢–± <b>Please enter a valid name</b>\n\n"
            "–Å–Ø–§–î <b>Try again with at least 2 characters</b>"
        )
        return

    # Initialize user state if not exists
    if user_id not in user_state:
        user_state[user_id] = {"current_step": None, "data": {}}

    # Store custom name and move to next step
    user_state[user_id]["data"]["full_name"] = custom_name
    user_state[user_id]["current_step"] = "choosing_phone_option"

    success_text = f"""
—Ç–¨–ï <b>Custom Name Successfully Added!</b>

–Å–Ø–°–¥ <b>Your Name:</b> {custom_name}

–Å–Ø–£–õ <b>Account Creation - Step 2/3</b>

–Å–Ø–£‚ñí <b>Phone Number Selection</b>

–Å–Ø–¢–± <b>—Ä–¥–ñ—Ä–¥–∫ phone number —Ä–¥–•—Ä–µ–ò—Ä–¥‚ïï—Ä–µ–ó provide —Ä–¥–•—Ä–¥‚ñë—Ä–¥–∏—Ä–¥‚ïõ —Ä–¥–™—Ä–¥‚ïõ—Ä–¥‚ï£—Ä–¥–¥—Ä–µ–ó —Ä–¥‚ï£—Ä–µ–ò—Ä–¥–í?</b>

–Å–Ø–§‚ïï <b>Telegram Contact:</b> —Ä–¥–ñ—Ä–¥–∫—Ä–¥–•—Ä–¥‚ïõ Telegram —Ä–¥–æ—Ä–µ–ó—Ä–¥–í saved contact number
–Å–Ø–§‚ïï <b>Manual Entry:</b> —Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–µ–ê —Ä–¥–∫—Ä–¥‚ïï—Ä–¥–í—Ä–¥–∂ —Ä–¥–•—Ä–¥‚ïõ —Ä–¥–•—Ä–µ–õ—Ä–¥–ò —Ä–¥–Ω—Ä–µ–ê number

—Ç–™–∞—è‚ïï–ü <b>Note:</b> Contact share —Ä–¥–•—Ä–¥‚ñë—Ä–¥–∏—Ä–µ–ó —Ä–¥‚ïï—Ä–µ–ó —Ä–¥–ñ—Ä–¥–∫—Ä–¥–•—Ä–µ–ê permission —Ä–¥–æ—Ä–¥‚ïõ—Ä–¥–ë—Ä–¥–ß—Ä–µ–ê —Ä–¥–¨—Ä–¥‚ïõ—Ä–¥–ü—Ä–¥–ß—Ä–µ–ê —Ä–¥–§—Ä–¥‚ñë —Ä–¥–ñ—Ä–¥–∫—Ä–¥–•—Ä–¥‚ïõ number automatically —Ä–¥–Ω—Ä–¥‚ñë —Ä–¥–¨—Ä–¥‚ïõ—Ä–¥–ü—Ä–¥–ß—Ä–¥‚ïõ

–Å–Ø–¢–º <b>—Ä–¥–ñ—Ä–¥–∫ —Ä–¥–•—Ä–µ–ù—Ä–¥–ø—Ä–¥‚ïõ choose —Ä–¥–•—Ä–¥‚ñë—Ä–¥–∏—Ä–¥‚ïõ —Ä–¥–™—Ä–¥‚ïõ—Ä–¥‚ï£—Ä–¥–¥—Ä–µ–ó —Ä–¥‚ï£—Ä–µ–ò—Ä–¥–í?</b>
"""

    phone_choice_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–Å–Ø–£‚ñí Telegram Contact Share —Ä–¥–•—Ä–¥‚ñë—Ä–µ–í—Ä–¥–í", callback_data="share_telegram_contact"),
            InlineKeyboardButton(text="—Ç–¨–ü—è‚ïï–ü Manual Number —Ä–¥–±—Ä–¥‚ïõ—Ä–¥‚ñì—Ä–µ–í—Ä–¥–í", callback_data="manual_phone_entry")
        ]
    ])

    await message.answer(success_text, reply_markup=phone_choice_keyboard)

async def handle_manual_phone_input(message, user_id):
    """Handle manual phone number entry with comprehensive Indian validation"""
    phone_input = message.text.strip()

    # Remove any spaces, dashes, brackets or other common separators
    phone_cleaned = phone_input.replace(" ", "").replace("-", "").replace("(", "").replace(")", "").replace(".", "")

    # Check if input contains any letters
    if any(char.isalpha() for char in phone_cleaned):
        await message.answer(
            "—Ç–™–∞—è‚ïï–ü <b>Letters Not Allowed!</b>\n\n"
            "–Å–Ø–§–¥ <b>Phone number —Ä–¥–æ—Ä–µ–ó—Ä–¥–í letters —Ä–¥–∏—Ä–¥‚ï£—Ä–µ–ê—Ä–¥–í —Ä–¥‚ï£—Ä–µ–õ —Ä–¥‚ïï—Ä–¥–•—Ä–¥–¥—Ä–µ–ó</b>\n"
            "–Å–Ø–§–≤ <b>—Ä–¥–•—Ä–µ–ó—Ä–¥‚ï°—Ä–¥‚ñì numbers —Ä–¥–§—Ä–¥‚ñë +91 allowed —Ä–¥‚ï£—Ä–µ–ò</b>\n"
            "–Å–Ø–¢–± <b>Example:</b> +919876543210\n\n"
            "–Å–Ø–§–î <b>Try again with only numbers</b>"
        )
        return

    # Validate country code presence
    if not phone_cleaned.startswith('+91'):
        await message.answer(
            "—Ç–™–∞—è‚ïï–ü <b>Country Code Missing!</b>\n\n"
            "–Å–Ø–ó–æ–Å–Ø–ó‚îÇ <b>Indian numbers must start with +91</b>\n"
            "—Ç–≠–ú <b>Numbers without +91 are not accepted</b>\n"
            "–Å–Ø–¢–± <b>Example:</b> +919876543210\n\n"
            "–Å–Ø–§–î <b>Add +91 before your number</b>"
        )
        return

    # Check exact length (should be 13: +91 + 10 digits)
    if len(phone_cleaned) != 13:
        await message.answer(
            "—Ç–™–∞—è‚ïï–ü <b>Invalid Length!</b>\n\n"
            f"–Å–Ø–£–ü <b>Entered length: {len(phone_cleaned)} characters</b>\n"
            "–Å–Ø–£–ü <b>Required: Exactly 13 characters</b>\n"
            "–Å–Ø–¢–± <b>Format:</b> +91 followed by 10 digits\n"
            "–Å–Ø–¢–± <b>Example:</b> +919876543210\n\n"
            "–Å–Ø–§–î <b>Check your number length</b>"
        )
        return

    # Extract the 10-digit number part
    digits_part = phone_cleaned[3:]  # Remove +91

    # Check if only digits after +91
    if not digits_part.isdigit():
        await message.answer(
            "—Ç–™–∞—è‚ïï–ü <b>Invalid Characters!</b>\n\n"
            "–Å–Ø–§–≤ <b>Only numbers allowed after +91</b>\n"
            "—Ç–≠–ú <b>No spaces, letters, or special characters</b>\n"
            "–Å–Ø–¢–± <b>Example:</b> +919876543210\n\n"
            "–Å–Ø–§–î <b>Use only digits after +91</b>"
        )
        return

    # Check for invalid starting digits (Indian mobile rules)
    first_digit = digits_part[0]
    invalid_starting_digits = ['0', '1', '2', '3', '4', '5']

    if first_digit in invalid_starting_digits:
        await message.answer(
            "—Ç–™–∞—è‚ïï–ü <b>Invalid Starting Digit!</b>\n\n"
            f"–Å–Ø–£‚ñí <b>Indian mobile numbers cannot start with {first_digit}</b>\n"
            "—Ç–¨–ï <b>Valid starting digits:</b> 6, 7, 8, 9\n"
            "–Å–Ø–¢–± <b>Example:</b> +919876543210, +917894561230\n\n"
            "–Å–Ø–§–î <b>Use a valid Indian mobile number</b>"
        )
        return

    # Store phone number and move to next step
    user_state[user_id]["data"]["phone_number"] = phone_cleaned
    user_state[user_id]["current_step"] = "waiting_email"

    success_text = f"""
—Ç–¨–ï <b>Phone Number Successfully Added!</b>

–Å–Ø–£‚ñí <b>Your Phone:</b> {phone_cleaned}

–Å–Ø–£–õ <b>Account Creation - Step 3/3</b>

–Å–Ø–£–∑ <b>—Ä–¥–•—Ä–µ–ì—Ä–¥–∫—Ä–¥–ø—Ä–¥‚ïõ —Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–¥‚ïõ Email Address —Ä–¥–Ω—Ä–µ–ó—Ä–¥–¨—Ä–µ–ó—Ä–¥–í:</b>

—Ç–™–∞—è‚ïï–ü <b>Example:</b> your.email@gmail.com
–Å–Ø–¢–º <b>Instruction:</b> —Ä–¥–ï—Ä–¥–∫—Ä–¥–∏—Ä–¥‚ïõ email address type —Ä–¥–•—Ä–¥‚ñë—Ä–¥–•—Ä–µ–ó —Ä–¥–Ω—Ä–µ–ó—Ä–¥–¨ —Ä–¥–∂—Ä–µ–ó—Ä–¥–í
"""

    await message.answer(success_text)

async def handle_email_input(message, user_id):
    """Handle email input for account creation completion"""
    email = message.text.strip()

    # Basic email validation
    import re
    email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'

    if not re.match(email_pattern, email):
        await message.answer(
            "—Ç–™–∞—è‚ïï–ü <b>Invalid Email Format!</b>\n\n"
            "–Å–Ø–£–∑ <b>Please enter a valid email address</b>\n"
            "–Å–Ø–¢–± <b>Example:</b> your.email@gmail.com\n\n"
            "–Å–Ø–§–î <b>Try again with correct format</b>"
        )
        return

    # Store email and complete account creation
    user_state[user_id]["data"]["email"] = email

    # Save all data to users_data
    user_data = user_state[user_id]["data"]
    users_data[user_id] = {
        'full_name': user_data.get('full_name', ''),
        'phone_number': user_data.get('phone_number', ''),
        'email': email,
        'balance': 0.0,
        'account_created': True,
        'created_at': init_user(user_id)
    }

    # Clear user state
    user_state[user_id]["current_step"] = None
    user_state[user_id]["data"] = {}

    success_text = f"""
–Å–Ø–û–ô <b>Account Created Successfully!</b>

—Ç–¨–ï <b>Welcome to India Social Panel!</b>

–Å–Ø–°–¥ <b>Your Account Details:</b>
—Ç–ê–≤ Name: {user_data.get('full_name', 'N/A')}
—Ç–ê–≤ Phone: {user_data.get('phone_number', 'N/A')}
—Ç–ê–≤ Email: {email}
—Ç–ê–≤ Balance: —Ç–í‚ï£0.00

–Å–Ø–™–ê <b>All features are now accessible!</b>
–Å–Ø–¢–± <b>—Ä–¥–ñ—Ä–¥–∫ —Ä–¥–ï—Ä–¥–º —Ä–¥‚ïï—Ä–¥–Ω—Ä–µ–ê services —Ä–¥–•—Ä–¥‚ïõ —Ä–¥–ó—Ä–¥‚ïï—Ä–µ–ù—Ä–¥–¥—Ä–µ–ó—Ä–¥–æ—Ä–¥‚ïõ—Ä–¥‚ñì —Ä–¥–•—Ä–¥‚ñë —Ä–¥‚ïï—Ä–¥–•—Ä–¥–¥—Ä–µ–ó —Ä–¥‚ï£—Ä–µ–ò—Ä–¥–í</b>

–Å–Ø–û–ø <b>Next Steps:</b>
—Ç–ê–≤ Add funds to your account
—Ç–ê–≤ Browse our premium services
—Ç–ê–≤ Place your first order
"""

    # Import get_main_menu dynamically to avoid circular imports
    try:
        from main import get_main_menu
        await message.answer(success_text, reply_markup=get_main_menu())
    except ImportError:
        await message.answer(success_text)
